<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.winebouti.mapper.ReviewMapper">

	<resultMap id="reviewResultMap"
		type="com.winebouti.vo.ReviewVO">
		<id property="reviewId" column="review_id" />
		<result property="productId" column="product_id" />
		<result property="memberId" column="member_id" />
		<!-- <result property="purchaseId" column="purchase_id" /> -->
		<result property="content" column="content" />
		<result property="star" column="star" />
		<result property="isOpen" column="is_open" />
		<!-- <result property="password" column="password" /> -->
		<result property="response" column="response" />
		<result property="imagePath" column="image_path" />
		<result property="writeDate" column="write_date" />
		<result property="updateDate" column="update_date" />
		 <result property="userEmail" column="userEmail" />
	</resultMap>



	<select id="selectAllReviews" resultMap="reviewResultMap">
		SELECT * FROM review; <!-- 리뷰 테이블 -->
	</select>

	<!-- 리뷰 ID로 리뷰 조회 -->
	<select id="getReviewsByProductId" resultMap="reviewResultMap">
		SELECT
		r.review_id,
		r.product_id,
		r.member_id,
		r.title,
		r.content,
		r.star,
		r.is_open,
		r.response,
		r.image_path,
		r.thumbnail_path,
		r.write_date,
		r.update_date
		FROM Review r
		WHERE r.product_id = #{productId}
		ORDER BY r.write_date DESC
	</select>


	<!-- 리뷰 추가 -->
	<insert id="insertReview"
		parameterType="com.winebouti.vo.ReviewVO">
		INSERT INTO Review (product_id, member_id, title,
		content,
		star, image_path, thumbnail_path,
		write_date)
		VALUES (#{productId}, #{memberId},
		#{title},
		#{content}, #{star}, #{imagePath}, #{thumbnailPath},
		#{writeDate});
	</insert>

	<!-- 리뷰 수정 -->
	<update id="updateReview" 
		parameterType="com.winebouti.vo.ReviewVO">
		UPDATE Review
		SET content = #{content},
		star = #{star},
		is_open =
		#{isOpen},
		<!-- password = #{password}, -->
		response = #{response}
		WHERE review_id = #{reviewId}
	</update>

	<!-- 리뷰 정보 가져오기 (삭제 전 이미지 경로 확인) -->
	<!-- 리뷰 ID로 리뷰 가져오기 -->
<select id="getReviewById" resultMap="reviewResultMap">
    SELECT 
        r.review_id, 
        r.product_id, 
        r.member_id, 
        r.title, 
        r.content, 
        r.star, 
        r.is_open, 
        r.response, 
        r.image_path, 
        r.thumbnail_path, 
        r.write_date, 
        r.update_date, 
        m.email AS userEmail
    FROM Review r
    JOIN Member m ON r.member_id = m.member_id 
    WHERE r.review_id = #{reviewId}
</select>


	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="long">
		DELETE FROM Review WHERE
		review_id = #{reviewId}
	</delete>


	<!-- 이미지 -->
	<select id="getAllReviews" resultMap="reviewResultMap">
		SELECT
		review_id AS reviewId,
		product_id AS productId,
		member_id AS
		memberId,
		title,
		content,
		star,
		write_date AS writeDate,
		response,
		image_path AS imagePath  <!-- ⭐ 추가된 부분 -->
		FROM Review
	</select>

	<update id="updateImagePath">
	    UPDATE Review
	    SET image_path = #{imagePath}, thumbnail_path = #{thumbnailPath}
	    WHERE review_id = #{reviewId};
	</update>
	
	
	 <!-- ✅ 리뷰 답글 조회 (단일 조회) -->
    <select id="getReviewResponse" resultType="java.lang.String">
        SELECT response FROM review WHERE review_id = #{reviewId}
    </select>

    <!-- ✅ 리뷰 답글 추가 또는 수정 -->
    <update id="updateReviewResponse" parameterType="com.winebouti.vo.ReviewVO">
        UPDATE review 
        SET response = #{response}, update_date = NOW()
        WHERE review_id = #{reviewId}
    </update>

    <!-- ✅ 리뷰 답글 삭제 -->
    <update id="deleteReviewResponse" parameterType="com.winebouti.vo.ReviewVO">
        UPDATE review 
        SET response = NULL, update_date = NOW()
        WHERE review_id = #{reviewId}
    </update>
</mapper>
